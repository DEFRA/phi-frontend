{% extends 'layouts/page.njk' %}
{% block beforeContent %}
{% from "govuk/components/phase-banner/macro.njk" import govukPhaseBanner %}

{{ govukPhaseBanner({
  tag: {
    text: getHelpSection.betaText
  },
  html: getHelpSection.betabannertext1+" "+'<a class="govuk-link" href="https://defragroup.eu.qualtrics.com/jfe/form/SV_3fnzAvYuzyPg9cG">feedback</a>'+" "+getHelpSection.betabannertext2
}) }}
 <a href='/plant-health/purpose-of-visit' class="govuk-back-link" type='button'>Back</a>
{% endblock %}
{% block content %}
  {% call appPageBody() %}
  {% from "govuk/components/error-summary/macro.njk" import govukErrorSummary %}
 {% if errors.list %}
   <div class="govuk-error-summary" data-module="govuk-error-summary">
  <div role="alert">
    <h2 class="govuk-error-summary__title">
      There is a problem
    </h2>
    <div class="govuk-error-summary__body">
      <ul class="govuk-list govuk-error-summary__list">
        <li>
          <a href="#pestsearchQuery">{{errorMessage.message.text}}</a>
        </li>
      </ul>
    </div>
  </div>
</div>
  {% endif %}
  <form action='/plant-health/pest-search' method="get">
    <div aria-label="pestsearchform" class="govuk-form-group">
      <h1 class="govuk-label-wrapper">
        <label id="pestsearch1" class="govuk-label govuk-label--l" for="pestsearch1">
         What pest or disease do you want to find out about?
        </label>
      </h1>
      <label id="pestsearchhint" class="govuk-label" for="pestsearchhint">
       You can enter the scientific name or any synonyms or any common names.Only non-native pests and diseases that are a risk to Great Britain are included in this service.
      </label>
      {% if errorMessage.message %}
      <p id="event-name-error" class="govuk-error-message">
    <span class="govuk-visually-hidden">Error:</span> {{errorMessage.message.text}}
  </p>
  <input aria-describedby="event-name-error"  class="govuk-input govuk-input--error" id="pestsearchQuery" autocomplete="off" name="pestsearchQuery" type="text" aria-describedby="event-name-hint event-name-error">
 {% else %}
    {% if pestsearchQuery != "undefined"  %}
    <input aria-describedby="pestsearch1" class="govuk-input" id="pestsearchQuery" name="pestsearchQuery" autocomplete="off" type="text" value='{{pestsearchQuery.value}}'>
    {% else %}
     <input aria-describedby="pestsearch1" class="govuk-input" id="pestsearchQuery" name="pestsearchQuery" autocomplete="off" type="text" >
    {% endif %}
   {% endif %}
    <ul class="govuk-task-list solid-div" id="searchResults" style="width: 99.29%; max-height: 450px; display: none; overflow: auto"></ul>
 
   
    <input aria-label="cslRef" id="cslRef" name="cslRef" style="display: none;" value={{cslRef}}></input>
    <input aria-label="eppoCode" id="eppoCode" name="eppoCode" style="display: none; value="{{eppoCode}}"></input>
  </div>
    {% from "govuk/components/button/macro.njk" import govukButton %}

    {{ govukButton({
      text: "Continue",
      id: "submitButton"
    }) }}
  </form>
 
  <script>
   
    var searchInput = document.getElementById('pestsearchQuery');
    var searchResults = document.getElementById('searchResults');
    var inputValue;
    let currentIndex = -1;
    searchInput.addEventListener('input', function () {
     currentIndex = -1;
      inputValue = this
        .value;
    if (inputValue.length > 0) {
      fetchSuggestions(inputValue);
    } else {
      searchResults.innerHTML = '';
      searchResults.style.display = 'none';
    }
  });
  

  async function fetchSuggestions(pestsearchQuery) {
    var apiUrl = '/search/pests?searchQuery=' + pestsearchQuery;
      try {
        const response = await fetch(apiUrl);
        const responseJSON = await response.json();
        const result = await renderSuggestions(responseJSON);
        return result ? result : '';
      } catch (error) {
        // TypeError: Failed to fetch
        console.log('Error fetching suggestions:', error);
      }
  }
  var searchResult;
  var regexValue;

  function renderSuggestions(json) {
    console.log('JSON', json)
    var latinJson = json.message.pest_detail.filter(function(el) {
      return el.id == "latin-name"
    })[0].results
    var commonJson = json.message.pest_detail.filter(function(el) {
      return el.id == "common-name"
    })[0].results
    var synonymJson = json.message.pest_detail.filter(function(el) {
      return el.id == "synonym-name"
    })[0].results
    regexValue = inputValue.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
    console.log('REGEX', regexValue);     
    var latinArray = []
    var commonArray = []
    var synonymArray = []

    function getResults(latinJson, commonJson) {
      //latin name search

      if (commonArray.length === 0 && synonymArray.length === 0) {
        for (let i = 0; i < latinJson.length; i++) {
          for (let j = 0; j < latinJson[i]['pestName'].length; j++) {
         
            if ((latinJson[i]['pestName'][j]['type'] === "LATIN_NAME") && (latinJson[i]['pestName'][j]['NAME'].match(new RegExp(regexValue, "gi")))) {
             
              latinArray.push({
                result: latinJson[i]['pestName'],
                cslRef: latinJson[i]['cslRef'],
                eppoCode: latinJson[i]['eppoCode'],
                highlight: 'LATIN_NAME',
                matchingText: inputValue
              })
            }
          }
        }
      }

      //common name search
      if (synonymArray.length === 0) {
        for (let i = 0; i < commonJson.length; i++) {
          var existingArray;
          for (let j = 0; j < commonJson[i]['pestName'].length; j++) {
            if (commonJson[i]['pestName'][j]['type'] === "COMMON_NAME") {
              commonJson[i]['pestName'][j]['NAME'].sort().filter(name => {
                if (name.match(new RegExp(regexValue, "gi"))) {                 
                  if (latinArray.length > 0) {
                    var existingArray = commonExistingNameCheck(latinArray, name)
                    if (existingArray.length === 0) {
                      commonArray.push({
                        result: commonJson[i]['pestName'],
                        cslRef: commonJson[i]['cslRef'],
                        eppoCode: commonJson[i]['eppoCode'],
                        highlight: 'COMMON_NAME',
                        matchingText: inputValue
                      })
                    }
                  } else {
                    commonArray.push({
                      result: commonJson[i]['pestName'],
                      cslRef: commonJson[i]['cslRef'],
                      eppoCode: commonJson[i]['eppoCode'],
                      highlight: 'COMMON_NAME',
                      matchingText: inputValue
                    })
                  }

                }
              })
            }
          }
        }
      }

      //synonym name search
      if (commonArray.length === 0) {
        for (let i = 0; i < synonymJson.length; i++) {
          for (let j = 0; j < synonymJson[i]['pestName'].length; j++) {
            if (synonymJson[i]['pestName'][j]['type'] === "SYNONYM_NAME") {
              synonymJson[i]['pestName'][j]['NAME'].filter(name => {
                if (name.match(new RegExp(regexValue, "gi"))) {
               
                  if (latinArray.length > 0) {
                    var existingArray = synonymExistingNameCheck(latinArray, name)
                    if (existingArray.length === 0) {
                      synonymArray.push({
                        result: synonymJson[i]['pestName'],
                        cslRef: synonymJson[i]['cslRef'],
                        eppoCode: synonymJson[i]['eppoCode'],
                        highlight: 'SYNONYM_NAME',
                        matchingText: inputValue
                      })
                    }
                  } else {
                    synonymArray.push({
                      result: synonymJson[i]['pestName'],
                      cslRef: synonymJson[i]['cslRef'],
                      eppoCode: synonymJson[i]['eppoCode'],
                      highlight: 'SYNONYM_NAME',
                      matchingText: inputValue
                    })
                  }
                }
              })
            }
          }
        }
      }

    }
    getResults(latinJson, commonJson)

    var resultSet = [{
      latinNames: latinArray,
      commonNames: commonArray,
      synonymNames: synonymArray
    }]
 
    if (inputValue.length > 2){
      searchResults.innerHTML = '';
      searchResults.style.display = 'none';
      renderResultsWithHtml(resultSet)
    }

    return latinArray, commonArray, synonymArray
  }

  function synonymExistingNameCheck(latinArray, name) {
    var existingArray = []
    latinArray.filter(function(item) {
      item.result[2]['NAME']?.filter(function(sname) {
        if (sname.match(new RegExp(name, "gi")))
          existingArray.push(sname)
      })
    })
    return existingArray
  }

  function commonExistingNameCheck(latinArray, name) {
    var existingArray = []
    latinArray.filter(function(item) {
      item.result[1]['NAME']?.filter(function(cname) {
        if (cname.match(new RegExp(name, "gi")))
          existingArray.push(cname)
      })
    })
    return existingArray
  }

 async function renderResultsWithHtml(filterResults) {
    var checkForEmptyArray = filterResults.flat()
    if (checkForEmptyArray.length > 0) {
      if (checkForEmptyArray[0]['commonNames'].length === 0 &&
        checkForEmptyArray[0]['latinNames'].length === 0 &&
        checkForEmptyArray[0]['synonymNames'].length === 0) {
        var liNew = document.createElement('li');
        liNew.className = "govuk-task-list__item govuk-task-list__item--with-link";
         liNew.ariaLabel="List items"
        liNew.textContent = "No results found"
        searchResults.appendChild(liNew);
         var cslRefElement = document.getElementById('cslRef');
      var eppoCodeElement = document.getElementById('eppoCode');
      cslRefElement.value = ''
      eppoCodeElement.value = ''
        searchResults.style.display = 'inline-block';
      } else {
        filterResults.forEach(function(resultSet) {
          resultSet['latinNames'].forEach(function(item, index) {
            var latinIndex = 'latinName' + index
            createAndAppendLiElement(item, latinIndex)
          })

          resultSet['commonNames'].forEach(function(item, index) {
            var commonIndex = 'commonName' + index
            createAndAppendLiElement(item, commonIndex)
          })

          resultSet['synonymNames'].forEach(function(item, index) {
            var synonymIndex = 'synonymName' + index
            createAndAppendLiElement(item, synonymIndex)
          })
        })
      }
      await sortList()
       await exactmatch()
    }

  }

  function capitalizeFirstLetter(string) {
    if (string !== undefined){
     return string.charAt(0).toUpperCase() + string.slice(1);
    }
  }

  function synonymNameHTML(synonymName,item, commonName) {
    var synonymInnerHTMLText
    synonymName.forEach(function(sname, i) {
      if (commonName.length > 0) {
        synonymInnerHTMLText = capitalizeFirstLetter(sname) + " " + "(" + commonName + ")"
      } else {
        synonymInnerHTMLText = capitalizeFirstLetter(sname)
      }

      var division = document.createElement('div');
      division.className = "govuk-task-list__name-and-hint";
      division.id = 'div-'+ sname + i;
      division.innerHTML = synonymInnerHTMLText
      division.style.paddingLeft = '5px';
        division.ariaLabel=division.textContent;
      var li = document.createElement('li');
      li.className = "govuk-task-list__item govuk-task-list__item--with-link";
      li.id = sname + i;
      li.appendChild(division)
      var inputHref = document.createElement('input');
      inputHref.id = 'cslRef'+ sname +i;    
    inputHref.ariaLabel='cslRef'+ item.cslRef;
      inputHref.style = 'display:none'
      inputHref.setAttribute('value', item.cslRef);   
      var inputEppo = document.createElement('input');
      inputEppo.id = 'eppoCode'+ sname +i;
      inputEppo.style = 'display:none'
       inputEppo.setAttribute('value', item.eppoCode);
       inputEppo.ariaLabel='eppoCode'+ item.eppoCode;
      li.appendChild(inputHref)
      li.appendChild(inputEppo)
      var anchorTwo = document.createElement('a');
      anchorTwo.className = "govuk-link govuk-task-list__link";     
      anchorTwo.id = 'anchor-'+ sname + i;
      division.appendChild(anchorTwo);
      searchResults.appendChild(li);
    })
  }

  function createAndAppendLiElement(item, index) {
  console.log("itemin createandappend",item);
  
    var liOne = document.createElement('li');
    liOne.className = "govuk-task-list__item govuk-task-list__item--with-link";
    liOne.id = index;
    liOne.ariaLabel="list"
    var divisionOne = document.createElement('div');
    divisionOne.className = "govuk-task-list__name-and-hint";
    divisionOne.id = 'div-'+index;
    divisionOne.style.paddingLeft = '5px';
    divisionOne.ariaLabel=divisionOne.textContent
    var inputHref = document.createElement('input');
    inputHref.id = 'cslRef'+index;
    inputHref.style = 'display:none'
    inputHref.setAttribute('value', item.cslRef);
    inputHref.ariaLabel= 'cslref-'+ item.cslRef
    var inputEppo = document.createElement('input');
    inputEppo.id = 'eppoCode'+index;
    inputEppo.style = 'display:none'
    inputEppo.setAttribute('value', item.eppoCode);
    inputEppo.ariaLabel='eppoCode-' +item.eppoCode
    liOne.appendChild(inputHref)
    liOne.appendChild(inputEppo)
    var latinName, commonName, synonymName;
    item.result.filter(function(el) {
      if (el.type === "LATIN_NAME") {
        latinName = el.NAME
      }
      if (el.type === "COMMON_NAME") {
        commonName = el.NAME
      }
      if (el.type === "SYNONYM_NAME") {
        synonymName = el.NAME
      }
      return latinName, commonName, synonymName
    })
    var strongElement = document.createElement('strong');
    strongElement.textContent = inputValue;
   {# // latinName = latinName?.toLowerCase()?.replace(inputValue, strongElement.outerHTML) #}
     latinName = latinName?.replace(new RegExp(inputValue, "gi"), match => `<strong>${match}</strong>`)
    var newCA = []
    commonName.forEach(function(cname) {
      var highlightCName;
      if (cname.match(new RegExp(regexValue, "gi"))) {
      highlightCName = cname.replace(new RegExp(inputValue, "gi"), match => `<strong>${match}</strong>`)
        newCA.push(highlightCName);
      } else {
        newCA.push(cname);
      }
    })
    commonName = newCA.join("; ");
    var newSA = []
    synonymName.forEach(function(sname) {
      var highlightSName;
     if (sname.match(new RegExp(regexValue, "gi"))) {
        highlightSName = sname.replace(new RegExp(inputValue, "gi"), match => `<strong>${match}</strong>`)
        newSA.push(highlightSName);
      }
      else{
       if (commonName.length > 0 && item.highlight === 'COMMON_NAME'){
        newSA.push(sname);
       }
      }
    })
    synonymName = newSA;
    var latinInnerHTMLText;
    if (commonName.length > 0) {
      if (latinName !== undefined && item.highlight !== 'SYNONYM_NAME' && latinName.split(' ')[1] !== undefined){
       latinInnerHTMLText = capitalizeFirstLetter(latinName) + " " + "(" + commonName + ")"
      }
      synonymNameHTML(synonymName,item, commonName)
    } else {
    if (item.highlight !== 'SYNONYM_NAME'){
      if (latinName !== undefined  && latinName.split(' ')[1] !== undefined){
        latinInnerHTMLText = capitalizeFirstLetter(latinName)
      }
    }  
      synonymNameHTML(synonymName,item, commonName)
    }

    if (latinInnerHTMLText) {
      divisionOne.innerHTML = latinInnerHTMLText
      liOne.appendChild(divisionOne)
      searchResults.appendChild(liOne);
    }

     var anchorOne = document.createElement('a');
    anchorOne.className = "govuk-link govuk-task-list__link";    
    anchorOne.id = 'anchor-'+index;
    divisionOne.appendChild(anchorOne);
    searchResults.style.display = 'inline-block';    
   searchResults.addEventListener('click', function(e) {

    var targetId = e.target.id.split("-")  
    console.log(" targetId", targetId[1]);
     var autocompleteInputValue = document.getElementById('pestsearchQuery');
      console.log("document.getElementById('div-' +targetId[1])",document.getElementById('div-' +targetId[1]));
    
      autocompleteInputValue.value = document.getElementById('div-' + targetId[1]).textContent;
     
      var cslRefElement = document.getElementById('cslRef');
      var eppoCodeElement = document.getElementById('eppoCode');    
       cslRefElement.value = document.getElementById('cslRef'+ targetId[1]).value; 
       console.log(" cslRefElement.value", cslRefElement.value);     
    eppoCodeElement.value =document.getElementById('eppoCode'+targetId[1]).value;   
      searchResults.innerHTML = '';
      searchResults.style.display = 'none';
      this.removeEventListener('click', e);
    });

    
  }

   // Function to sort the list items alphabetically
    async function sortList() {
        // Select the ul element
        const ul = document.getElementById('searchResults');

        // Get the li elements
        const liElements = ul.getElementsByTagName('li');

        // Convert HTMLCollection to an array
        const liArray = Array.from(liElements);

        // Sort the array based on the text content of the li elements
        liArray.sort((a, b) => a.textContent.trim().localeCompare(b.textContent.trim()));

        // Clear the ul element
        ul.innerHTML = '';

        // Append the sorted li elements back to the ul element
        liArray.forEach(li => ul.appendChild(li));
    }

    document.getElementById('pestsearchQuery').addEventListener('keydown', function(e)  {    

      const dropdownButton = document.getElementById('pestsearchQuery'); 
    const dropdownContent = document.getElementById('searchResults');  
     const dropdownOptions = dropdownContent.getElementsByTagName("li")  
   
    if (dropdownOptions.length > 0) {    

  if (event.keyCode === 40) {
  event.preventDefault();  
       if((currentIndex+1) < dropdownOptions.length )
       {       
        currentIndex = (currentIndex + 1) % dropdownOptions.length;
        dropdownOptions[currentIndex].focus();
         addActive(dropdownOptions[currentIndex]);
         ensureVisible(dropdownOptions[currentIndex]) 
         }
      } 

 
      else if (event.key ==='ArrowUp') {
     
        event.preventDefault();      
          if(currentIndex > 0 )
         {
        currentIndex = (currentIndex - 1 + dropdownOptions.length) % dropdownOptions.length;
        dropdownOptions[currentIndex].focus();
        addActive(dropdownOptions[currentIndex]);
        ensureVisible(dropdownOptions[currentIndex]) 
        }
      } else if (event.key === 'Enter') {


  
        event.preventDefault();
        if (currentIndex > -1) {
     
          searchInput.value = dropdownOptions[currentIndex].textContent;      
          
          searchResults.style.display = 'none';
          searchInput.setAttribute('aria-expanded', 'false');
          const element = dropdownOptions[currentIndex];          
          const id =   element.querySelector("a").id    
          console.log("id",id);
          const Id =id.split("-")
    var cslRefElement = document.getElementById('cslRef');
      var eppoCodeElement = document.getElementById('eppoCode');     
       cslRefElement.value = document.getElementById('cslRef'+ Id[1]).value;      
    eppoCodeElement.value =document.getElementById('eppoCode'+ Id[1]).value;
       
        }
      } else if (event.key === 'Escape') {
        searchResults.innerHTML = '';
        searchResults.style.display = 'none';
        searchInput.setAttribute('aria-expanded', 'false');
      }
    }
  });

async function exactmatch() {
      const dropdownContent = document.getElementById('searchResults');
    const options = dropdownContent.getElementsByTagName("li");
    
     var inputinsearch = document.getElementById('pestsearchQuery')?.value
    
    if(options.length === 1)
    {
   const divElement = options[0].querySelector("div");    
   const htmlName =options[0].querySelector("div").innerText .split("(")  
  
  var DbName =htmlName[0].toLowerCase();
  var searchName =inputinsearch.toLowerCase()
  console.log("DbName",DbName)
  console.log("searchName",searchName)
    if(DbName.trim() === searchName.trim())
    {   
      divElement.style.color="white"
     options[0].classList.add("autocomplete-active");
      currentIndex = (currentIndex + 1) % options.length;  
       var cslRefElement = document.getElementById('cslRef');
      var eppoCodeElement = document.getElementById('eppoCode');   
       cslRefElement.value = document.getElementById('cslRef'+ options[0].id).value;     
    eppoCodeElement.value =document.getElementById('eppoCode'+options[0].id).value;      
    }
    }
    }
function ensureVisible(activeItem) {

 const dropdownContent = document.getElementById('searchResults');
  const dropdown = dropdownContent;
  const dropdownRect = dropdown.getBoundingClientRect();
  const activeItemRect = activeItem.getBoundingClientRect();  
  if (activeItemRect.bottom > dropdownRect.bottom) {
    dropdown.scrollTop += activeItemRect.bottom - dropdownRect.bottom;
  } else if (activeItemRect.top < dropdownRect.top) {
    dropdown.scrollTop -= dropdownRect.top - activeItemRect.top;
  }
  }



  function addActive(x) {

    if (!x) return false;
  
    removeActive(x);
    if (currentIndex >= x.length) currentIndex = 0;
    if (currentIndex < 0) currentIndex = (x.length - 1);
  
    const element1 =x.querySelector("div")
   
    element1.style.color="white"
    x.classList.add("autocomplete-active");
  }
  function removeActive(x) {
  const dropdownButton = document.getElementById('pestsearchQuery'); 
    const dropdownContent = document.getElementById('searchResults');
    const options = dropdownContent.getElementsByTagName("li");
   
    /*a function to remove the "active" class from all autocomplete items:*/
    for (var i = 0; i < options.length; i++) {   
    const element1 =options[i].querySelector("div");
   
   element1.style.color="black"
     options[i].classList.remove("autocomplete-active");
          }
  }


  document.addEventListener('click', (event) => {
    if (!searchInput.contains(event.target) && !searchResults.contains(event.target)) {
      searchResults.style.display = 'none';
      searchInput.setAttribute('aria-expanded', 'false');
    }
  });

</script>
<style>
.autocomplete-active {
  background-color: #1D70B8 !important; 
}
</style>
  {% set supportSection = { title: getHelpSection.titleText, supportMail: getHelpSection.supportUrl.href, email: getHelpSection.supportUrl.email, description: getHelpSection.supportUrl.text } %}
  {% include "partials/get-help.njk" %}
  
  {% endcall %}
{% endblock %}