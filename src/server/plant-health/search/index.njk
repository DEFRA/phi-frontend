{% extends 'layouts/page.njk' %}
{% block beforeContent %}
  <a href="/plant-health/search?searchQuery={{searchQuery.value}}" class="govuk-back-link" type='button'>Back</a>
{% endblock %}
{% block content %}
  {% call appPageBody() %}
  {% from "govuk/components/error-summary/macro.njk" import govukErrorSummary %}
 {% if errors.list %}
    {{ govukErrorSummary(errors.list) }}
  {% endif %}
  <form action='/plant-health/search' method="get">
    <div class="govuk-form-group">
      <h1 class="govuk-label-wrapper">
        <label class="govuk-label govuk-label--l" for="event-name">
          {{mainContent.headerText}}
        </label>
      </h1>
      <label class="govuk-label" for="event-name">
        {{mainContent.searchText1}}
      </label>
      {% if errorMessage.message %}
      <p id="event-name-error" class="govuk-error-message">
    <span class="govuk-visually-hidden">Error:</span> {{errorMessage.message.text}}
  </p>
  <input class="govuk-input govuk-input--error" id="query" name="searchQuery" maxlength="125" type="text" aria-describedby="event-name-hint event-name-error">
 {% else %}
    {% if searchQuery.value %}
    <input class="govuk-input" id="query" name="searchQuery" type="text" maxlength="125" value='{{searchQuery.value}}'>
    {% else %}
     <input class="govuk-input" id="query" name="searchQuery" type="text" maxlength="125">
    {% endif %}
   {% endif %}
    <ul class="govuk-task-list solid-div" id="searchResults"  style="width: 100%; max-height: 450px; display: none; overflow: auto"></ul>
  </div>
    {% from "govuk/components/button/macro.njk" import govukButton %}

    {{ govukButton({
      text: "Continue",
      id: "submitButton"
    }) }}
  </form>
 
  <script>
   
    var searchInput = document.getElementById('query');
    var searchResults = document.getElementById('searchResults');
    var inputValue;
    searchInput.addEventListener('input', function () {
      inputValue = this
        .value.toLowerCase();
        if (inputValue.length > 2){
          fetchSuggestions(inputValue); 
        }
        
    });
  
  function fetchSuggestions(query) { // Mock API endpoint URL
    var apiUrl = 'http://localhost:3000/search/plants?searchQuery='+query;
    fetch(apiUrl)
      .then(response => response.json())
      .then(data=> {
        result = renderSuggestions(data);
        return result ? result : '';
      })
      .catch(error => console.log('Error fetching suggestions:', error));
  }
  var searchResult;
  var regexValue;
  function renderSuggestions(json) {
      console.log('JSON', json)
      var latinJson = json.message.plant_detail.filter(function (el){ return el.id == "latin-name"})[0].results.map((item) => {return item['PLANT_NAME']})
      var commonJson = json.message.plant_detail.filter(function (el){ return el.id == "common-name"})[0].results.map((item) => {return item['PLANT_NAME']})
      var synonymJson = json.message.plant_detail.filter(function (el){ return el.id == "synonym-name"})[0].results.map((item) => {return item['PLANT_NAME']}) 
        regexValue = inputValue.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
        console.log('REGEX', inputValue);
        var latinArray = []
        var commonArray = []
        var synonymArray = []
        function getResults(latinJson, commonJson){
          if (commonArray.length === 0 && synonymArray.length === 0){
            for (let i=0; i < latinJson.length; i++){
              for(let j=0; j < latinJson[i].length; j++){
                if ((latinJson[i][j]['type'] === "LATIN_NAME") && (latinJson[i][j]['NAME'].match(new RegExp(regexValue,"gi")))){
                  console.log('LATIN')
                  if(latinArray.length > 0){
                      var existArray
                      existingArray = latinArray.filter(value => 
                      {
                      existArray = value.result.filter(item => {if (item.NAME === latinJson[i][j]['NAME']) return item})
                      })
                      if (existArray.length ===0){
                        latinArray.push({result: latinJson[i], highlight: 'LATIN_NAME', matchingText: inputValue})
                      }
                  }
                  else {
                    latinArray.push({result: latinJson[i], highlight: 'LATIN_NAME', matchingText: inputValue})
                  }
                }
              }
            }
          }
          if (latinArray.length === 0 && synonymArray.length === 0){
            for (let i=0; i < commonJson.length; i++){
              var existingArray;
              for(let j=0; j < commonJson[i].length; j++){   
                if (commonJson[i][j]['type'] === "COMMON_NAME") {
                  commonJson[i][j]['NAME'].filter(name => {
                    if (name.match(new RegExp(regexValue,"gi"))) {
                      if(commonArray.length > 0){
                        var existArray
                        existingArray = commonArray.filter(value => 
                        {
                         value.result.filter(item => {                     
                          if (item.type === 'COMMON_NAME'){
                            existArray = item.NAME.filter(cname => 
                            { if (cname.match(new RegExp(name,"gi"))) return cname})
                          }
                         })
                        })
                        
                        if (existArray.length === 0){
                          console.log('exists', existArray.length)
                          commonArray.push({result: commonJson[i], highlight: 'COMMON_NAME', matchingText: inputValue})
                        }
                      }
                      else {
                        commonArray.push({result: commonJson[i], highlight: 'COMMON_NAME', matchingText: inputValue})
                      }
                    }
                  })
                }
              }
            }
          }
          if (latinArray.length === 0 && commonArray.length === 0){
            for (let i=0; i < synonymJson.length; i++){
              var existingArray;
              for(let j=0; j < synonymJson[i].length; j++){   
                if (synonymJson[i][j]['type'] === "SYNONYM_NAME") {
                  synonymJson[i][j]['NAME'].filter(name => {
                    if (name.match(new RegExp(regexValue,"gi"))) {
                      if(synonymArray.length > 0){
                        var existArray
                        existingArray = synonymArray.filter(value => 
                        {
                         value.result.filter(item => {                     
                          if (item.type === 'SYNONYM_NAME'){
                            existArray = item.NAME.filter(cname => 
                            { if (cname.match(new RegExp(name,"gi"))) return cname})
                          }
                         })
                        })
                        
                        if (existArray.length === 0){
                          console.log('exists', existArray.length)
                          synonymArray.push({result: synonymJson[i], highlight: 'SYNONYM_NAME', matchingText: inputValue})
                        }
                      }
                      else {
                        synonymArray.push({result: synonymJson[i], highlight: 'SYNONYM_NAME', matchingText: inputValue})
                      }
                    }
                  })
                }
              }
            }
          }

        }
        getResults(latinJson, commonJson)
        
        var resultSet = [{latinNames: latinArray,commonNames:  commonArray,synonymNames: synonymArray}]
        console.log('RES', resultSet)
        if(regexValue.length > 3){
         searchResults.innerHTML = '';
         searchResults.style.display = 'none';
         renderResultsWithHtml(resultSet)
        }
        else{
         searchResults.innerHTML = '';
         searchResults.style.display = 'none';
        }
        
        return latinArray, commonArray, synonymArray
  }

  function renderResultsWithHtml(filterResults){
    var checkForEmptyArray = filterResults.flat()
    if (checkForEmptyArray.length > 0){
      if (checkForEmptyArray[0]['commonNames'].length === 0 && 
      checkForEmptyArray[0]['latinNames'].length === 0 && 
      checkForEmptyArray[0]['synonymNames'].length === 0 ){
       var liNew = document.createElement('li');
      liNew.className = "govuk-task-list__item govuk-task-list__item--with-link";
      liNew.textContent = "No results found"
      searchResults.appendChild(liNew);
      searchResults.style.display = 'inline-block';
      }
     else {  
      filterResults.forEach(function (resultSet) {  
        resultSet['latinNames'].forEach(function (item, index)
        {
          createAndAppendLiElement(item,index)
        })
        
        resultSet['commonNames'].forEach(function (item, index)
        {
          createAndAppendLiElement(item,index)
        })

        resultSet['synonymNames'].forEach(function (item, index)
        {
          createAndAppendLiElement(item,index)
        })
      })
    } 
    }
  
  }  
      
  function createAndAppendLiElement(item, index){
    console.log('FILTER', item)
      var li = document.createElement('li');
      li.className = "govuk-task-list__item govuk-task-list__item--with-link";
      li.id = 'searchResults' + index;
      searchResults.appendChild(li);
      var division = document.createElement('div');
      division.className = "govuk-task-list__name-and-hint";
      division.id = 'div-searchResults' + index;
        var latinName, commonName, synonymName;
        item.result.filter(function (el){
        if (el.type === "LATIN_NAME"){
           latinName = el.NAME  
        }
        if (el.type === "COMMON_NAME"){
          commonName = el.NAME
        }
        if (el.type === "SYNONYM_NAME"){
          synonymName = el.NAME
        }
        return latinName,commonName,synonymName
      })
       if(item.highlight === "LATIN_NAME"){
          var strongElement = document.createElement('strong');
          strongElement.textContent = inputValue;
          strongElement.style.color = "red";
          latinName = latinName.toLowerCase().replace(inputValue, strongElement.outerHTML)
       }
       else if(item.highlight === "COMMON_NAME"){
          var strongElement = document.createElement('strong');
          strongElement.textContent = inputValue;
          strongElement.style.color = "red";
          var newCA = []
          commonName.forEach(function (cname){
           var highlightCName;
           if (cname.match(new RegExp(regexValue,"gi"))){
            highlightCName = cname.toLowerCase().replace(inputValue, strongElement.outerHTML)
            newCA.push(highlightCName);
           }
           else{
            newCA.push(cname);
           }
           
          })
          commonName = newCA
       }
       else if(item.highlight === "SYNONYM_NAME"){
          var strongElement = document.createElement('strong');
          strongElement.textContent = inputValue;
          strongElement.style.color = "red";
          var newCA = []
          synonymName.forEach(function (sname){
           var highlightSName;
           if (sname.match(new RegExp(regexValue,"gi"))){
            highlightSName = sname.toLowerCase().replace(inputValue, strongElement.outerHTML)
            newCA.push(highlightSName);
           }
           else{
            newCA.push(sname);
           }
           
          })
          synonymName = newCA
       }
      var innerHTMLText 
      if (synonymName.length === 0){
       if (commonName.length > 0){
         innerHTMLText = latinName + ", " + "( " + commonName + " )"
       }
       else{
        innerHTMLText = latinName
       }
      }
      else{
       if (commonName.length > 0){
         innerHTMLText = synonymName + ", " + "( " + commonName + " )"
       }
       else{
        innerHTMLText = synonymName
       }
      }
      division.innerHTML = innerHTMLText 
    
      li.appendChild(division)
      searchResults.style.display = 'inline-block';
      {# highlightText(item, division, regexValue); #}
    
      
  }
  </script>

  {% set supportSection = { title: getHelpSection.titleText, supportMail: getHelpSection.supportUrl.href, email: getHelpSection.supportUrl.email, description: getHelpSection.supportUrl.text } %}
  {% include "partials/get-help.njk" %}
  
  {% endcall %}
{% endblock %}